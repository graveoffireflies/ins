Practical-1


AIM:- Implementing Substitution and Transposition ciphers.

1) Design and implement algorithms to encrypt and decrypt messages using classical substitution techniques

CODE- Caesar Cipher 

#A python program to illustrate Caesar Cipher Technique

def encrypt(text,s):
	result = ""

	# traverse text
	for i in range(len(text)):
		char = text[i]

		# Encrypt uppercase characters
		if (char.isupper()):
			result += chr((ord(char) + s-65) % 26 + 65)

		# Encrypt lowercase characters
		else:
			result += chr((ord(char) + s - 97) % 26 + 97)

	return result

#check the above function
text = "ATTACKATONCE"
s = 4
print ("Text : " + text)
print ("Shift : " + str(s))
print ("Cipher: " + encrypt(text,s))

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 






CODE- Monoalphabetic cipher

// Java Program to Implement the Monoalphabetic Cypher

import java.io.*;
class GFG {
	public static char normalChar[]
		= { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
			'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
			's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };

	public static char codedChar[]
		= { 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O',
			'P', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K',
			'L', 'Z', 'X', 'C', 'V', 'B', 'N', 'M' };

	// Function which returns encrypted string
	public static String stringEncryption(String s)
	{
		// initializing an empty String
		String encryptedString = "";

		// comparing each character of the string and
		// encoding each character using the indices
		for (int i = 0; i < s.length(); i++) {
			for (int j = 0; j < 26; j++) {

				// comparing the character and
				// adding the corresponding char
				// to the encryptedString
				if (s.charAt(i) == normalChar[j])
				{
					encryptedString += codedChar[j];
					break;
				}

				// if there are any special characters
				// add them directly to the string
				if (s.charAt(i) < 'a' || s.charAt(i) > 'z')
				{
					encryptedString += s.charAt(i);
					break;
				}
			}
		}

		// return encryptedString
		return encryptedString;
	}

	// Function which returns descryptedString
	public static String stringDecryption(String s)
	{

		// Initializing the string
		String decryptedString = "";

		// Run the for loop for total string
		for (int i = 0; i < s.length(); i++)
		{
			for (int j = 0; j < 26; j++) {

				// compare each characters and decode them
				// using indices
				if (s.charAt(i) == codedChar[j])
				{
					decryptedString += normalChar[j];
					break;
				}

				// Add the special characters directly to
				// the String
				if (s.charAt(i) < 'A' || s.charAt(i) > 'Z')
				{
					decryptedString += s.charAt(i);
					break;
				}
			}
		}

		// return the decryptedString
		return decryptedString;
	}
	public static void main(String args[])
	{
		String str = "Welcome to Mumbai";

		// print plain text
		System.out.println("Plain text: " + str);

		// Changing whole string to lower case
		// function call to stringEncryption and storing in
		// encryptedString
		String encryptedString = stringEncryption(str.toLowerCase());

		// printing encryptedString
		System.out.println("Encrypted message: "
						+ encryptedString);

		// function call to stringDecryption and printing
		// the decryptedString
		System.out.println("Decrypted message: "
			+ stringDecryption(encryptedString));
	
	}
}


-----------------------------------------------------------------------------------------------------------------------------------------------------
 

2) Design and implement algorithms to encrypt and decrypt messages using classical Transposition techniques

Code- Railfence Cipher

# Python3 program to illustrate Rail Fence Cipher Encryption and Decryption

def encryptRailFence(text, key):

	rail = [['\n' for i in range(len(text)) ]
    for j in range(key)]
	dir_down = False
	row, col = 0, 0
	
	for i in range(len(text)):
		
		if (row == 0) or (row == key - 1):
			dir_down = not dir_down
		
		rail[row][col] = text[i]
		col += 1
		
		if dir_down:
			row += 1
		else:
			row -= 1
	result = []
	for i in range(key):
		for j in range(len(text)):
			if rail[i][j] != '\n':
				result.append(rail[i][j])
	return("" . join(result))
	
def decryptRailFence(cipher, key):

	rail = [['\n' for i in range(len(cipher))]
				for j in range(key)]
	
	dir_down = None
	row, col = 0, 0
	
	for i in range(len(cipher)):
		if row == 0:
			dir_down = True
		if row == key - 1:
			dir_down = False
		
		rail[row][col] = '*'
		col += 1
		
		if dir_down:
			row += 1
		else:
			row -= 1
			
	index = 0
	for i in range(key):
		for j in range(len(cipher)):
			if ((rail[i][j] == '*') and
			(index < len(cipher))):
				rail[i][j] = cipher[index]
				index += 1
		
	result = []
	row, col = 0, 0
	for i in range(len(cipher)):
		
		if row == 0:
			dir_down = True
		if row == key-1:
			dir_down = False
			
		if (rail[row][col] != '*'):
			result.append(rail[row][col])
			col += 1
			
		if dir_down:
			row += 1
		else:
			row -= 1
	return("".join(result))

# Driver code
if __name__ == "__main__":
	print(encryptRailFence("Vanga", 3))
	print(encryptRailFence("Sapdunga ", 3))
	print(encryptRailFence("Poitu Vanga", 3))
	
	print(decryptRailFence("Vaagn", 3))
	print(decryptRailFence("Su adnapg", 3))
	print(decryptRailFence("Punot agiVa", 3))





--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 

Code: Playfair Cipher

# Python program to implement Playfair Cipher
def toLowerCase(text):
	return text.lower()

def removeSpaces(text):
	newText = ""
	for i in text:
		if i == " ":
			continue
		else:
			newText = newText + i
	return newText

def Diagraph(text):
	Diagraph = []
	group = 0
	for i in range(2, len(text), 2):
		Diagraph.append(text[group:i])

		group = i
	Diagraph.append(text[group:])
	return Diagraph

def FillerLetter(text):
	k = len(text)
	if k % 2 == 0:
		for i in range(0, k, 2):
			if text[i] == text[i+1]:
				new_word = text[0:i+1] + str('x') + text[i+1:]
				new_word = FillerLetter(new_word)
				break
			else:
				new_word = text
	else:
		for i in range(0, k-1, 2):
			if text[i] == text[i+1]:
				new_word = text[0:i+1] + str('x') + text[i+1:]
				new_word = FillerLetter(new_word)
				break
			else:
				new_word = text
	return new_word


list1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm',
		'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

def generateKeyTable(word, list1):
	key_letters = []
	for i in word:
		if i not in key_letters:
			key_letters.append(i)

	compElements = []
	for i in key_letters:
		if i not in compElements:
			compElements.append(i)
	for i in list1:
		if i not in compElements:
			compElements.append(i)

	matrix = []
	while compElements != []:
		matrix.append(compElements[:5])
		compElements = compElements[5:]

	return matrix


def search(mat, element):
	for i in range(5):
		for j in range(5):
			if(mat[i][j] == element):
				return i, j


def encrypt_RowRule(matr, e1r, e1c, e2r, e2c):
	char1 = ''
	if e1c == 4:
		char1 = matr[e1r][0]
	else:
		char1 = matr[e1r][e1c+1]

	char2 = ''
	if e2c == 4:
		char2 = matr[e2r][0]
	else:
		char2 = matr[e2r][e2c+1]

	return char1, char2


def encrypt_ColumnRule(matr, e1r, e1c, e2r, e2c):
	char1 = ''
	if e1r == 4:
		char1 = matr[0][e1c]
	else:
		char1 = matr[e1r+1][e1c]

	char2 = ''
	if e2r == 4:
		char2 = matr[0][e2c]
	else:
		char2 = matr[e2r+1][e2c]

	return char1, char2


def encrypt_RectangleRule(matr, e1r, e1c, e2r, e2c):
	char1 = ''
	char1 = matr[e1r][e2c]

	char2 = ''
	char2 = matr[e2r][e1c]

	return char1, char2


def encryptByPlayfairCipher(Matrix, plainList):
	CipherText = []
	for i in range(0, len(plainList)):
		c1 = 0
		c2 = 0
		ele1_x, ele1_y = search(Matrix, plainList[i][0])
		ele2_x, ele2_y = search(Matrix, plainList[i][1])

		if ele1_x == ele2_x:
			c1, c2 = encrypt_RowRule(Matrix, ele1_x, ele1_y, ele2_x, ele2_y)
			# Get 2 letter cipherText
		elif ele1_y == ele2_y:
			c1, c2 = encrypt_ColumnRule(Matrix, ele1_x, ele1_y, ele2_x, ele2_y)
		else:
			c1, c2 = encrypt_RectangleRule(
				Matrix, ele1_x, ele1_y, ele2_x, ele2_y)

		cipher = c1 + c2
		CipherText.append(cipher)
	return CipherText


text_Plain = 'Vetrivel Muruganuku'
text_Plain = removeSpaces(toLowerCase(text_Plain))
PlainTextList = Diagraph(FillerLetter(text_Plain))
if len(PlainTextList[-1]) != 2:
	PlainTextList[-1] = PlainTextList[-1]+'z'

key = "Arogharaa"
print("Key text:", key)
key = toLowerCase(key)
Matrix = generateKeyTable(key, list1)

print("Plain Text:", text_Plain)
CipherList = encryptByPlayfairCipher(Matrix, PlainTextList)

CipherText = ""
for i in CipherList:
	CipherText += i
print("CipherText:", CipherText)
